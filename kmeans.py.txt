import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')
import numpy as np
import pandas as pd
from sklearn import preprocessing
#defining c;lass
class K_Means:
    def __init__(self,k=2,tol=0.001,max_iter=300):
        self.tol=tol
        self.k=k
        self.max_iter=max_iter
  

    def fit(self,data):
        self.centroids=np.array([data[i] for i in range(self.k)])
        self.centroids={}
        prev_centroids={}
        for i in range(self.k):
            self.centroids[i]=data[i]
            prev_centroids[i]=data[i]
        #for i in range(self.max_iter):
        for i in range(self.max_iter):    
            self.classifications={}
            for i in range(self.k):
                self.classifications[i]=[]
            
            for featureset in x:
                distances=[np.linalg.norm(featureset-self.centroids[centroid]) for centroid in self.centroids]
                classification=distances.index(min(distances))
                self.classifications[classification].append(featureset)
            prev_centroids=dict(self.centroids)
            for classification in self.classifications:
                self.centroids[classification]=np.average(self.classifications[classification],axis=0)#find centroid for all value
            optimized=True
            for c in self.centroids:
                original_centroid=prev_centroids[c]
                current_centroid=self.centroids[c]
                if np.sum((current_centroid-original_centroid)/original_centroid*100.0)>self.tol:
                    print(np.sum((current_centroid-original_centroid)/original_centroid*100.0))
                    optimized=False
            if optimized:
                break
    def predict(self,data):
        distances=[np.linalg.norm(data-self.centroids[centroid]) for centroid in self.centroids]
        classification=distances.index(min(distances))
        return classification
         
df=pd.read_csv('train.csv')
df.drop(['Name'],1,inplace=True)
df.convert_objects(convert_numeric=True)
print(df.head())
df.fillna(0,inplace=True)
def handle_non_numerical_data(dataset):
    columns=df.columns.values
    for column in columns:
        text_digit_vals={}
        def convert_to_int(val):
            return text_digit_vals[val]
        if df[column].dtype!=np.int64 and df[column].dtype!=np.float64:
            column_contents=df[column].values.tolist()
            unique_elements=set(column_contents)
            x=0
            for unique in unique_elements:
                if unique not in text_digit_vals:
                    text_digit_vals[unique]=x
                    x=x+1
            df[column]=list(map(convert_to_int,df[column]))
    return df
df=handle_non_numerical_data(df)
print(df.head())
df.drop(['Ticket'],1,inplace=True)
x=np.array(df.drop(['Survived'],1).astype(float))
x=preprocessing.scale(x)
y=np.array(df['Survived'])

clf=K_Means()
clf.fit(x)
correct=0
for i in range(len(x)):
    predict_me=np.array(x[i].astype(float))
    predict_me=predict_me.reshape(-1,len(predict_me))
    prediction=clf.predict(predict_me)
    if(prediction == y[i]):
        correct+=1
    print(correct/len(x)) 
clf=K_Means()
clf.fit(x)
    
for centroid in clf.centroids:
    plt.scatter(clf.centroids[centroid][0],clf.centroids[centroid][1],marker="o",color="k",s=    150,linewidth=5)
for classification in clf.classifications:
        for featureset in clf.classifications[classification]:
        plt.scatter(featureset[0],featureset[1],marker="x",s=150,linewidth=5)
plt.show()

